name: Changeset Check

on:
  pull_request:
    branches:
      - main

jobs:
  check:
    name: Check for changeset
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Fetch main branch
        run: |
          git fetch origin main:main || git fetch origin main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for changesets
        id: changeset_check
        run: |
          if git diff --name-only origin/main... | grep -q "^\.changeset/.*\.md$"; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "✅ Changeset found"
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "⚠️ No changeset found"
          fi

      - name: Get changeset status
        id: changeset_status
        if: steps.changeset_check.outputs.found == 'true'
        run: |
          # Get the changeset status and parse it
          STATUS_OUTPUT=$(npx changeset status --verbose 2>&1 || echo "")

          echo "=== Changeset Status Output ==="
          echo "$STATUS_OUTPUT"
          echo "==============================="

          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")

          # Determine bump type and extract version
          BUMP_TYPE=""
          NEW_VERSION=""

          # Extract version from the line containing the package name
          # Line format: "🦋  - Estimatee-Mee 7.0.0"
          NEW_VERSION=$(echo "$STATUS_OUTPUT" | grep "$PACKAGE_NAME" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)

          # Determine bump type by checking which section contains the package
          if echo "$STATUS_OUTPUT" | grep -i "major" | grep -q "$PACKAGE_NAME"; then
            BUMP_TYPE="major"
          elif echo "$STATUS_OUTPUT" | grep -i "minor" | grep -q "$PACKAGE_NAME"; then
            BUMP_TYPE="minor"
          elif echo "$STATUS_OUTPUT" | grep -i "patch" | grep -q "$PACKAGE_NAME"; then
            BUMP_TYPE="patch"
          else
            # Fallback: if we have a version but no type, check the context
            if [ -n "$NEW_VERSION" ]; then
              # Look at the lines before the package line to find the bump type
              CONTEXT=$(echo "$STATUS_OUTPUT" | grep -B 5 "$PACKAGE_NAME")
              if echo "$CONTEXT" | grep -q -i "major"; then
                BUMP_TYPE="major"
              elif echo "$CONTEXT" | grep -q -i "minor"; then
                BUMP_TYPE="minor"
              elif echo "$CONTEXT" | grep -q -i "patch"; then
                BUMP_TYPE="patch"
              fi
            fi
          fi

          echo "Parsed values:"
          echo "  Package: $PACKAGE_NAME"
          echo "  Current: $CURRENT_VERSION"
          echo "  New: $NEW_VERSION"
          echo "  Bump: $BUMP_TYPE"

          # Output for use in next steps
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Update PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const changesetFound = '${{ steps.changeset_check.outputs.found }}' === 'true';

            let message = '';

            if (changesetFound) {
              const currentVersion = '${{ steps.changeset_status.outputs.current_version }}';
              const newVersion = '${{ steps.changeset_status.outputs.new_version }}';
              const packageName = '${{ steps.changeset_status.outputs.package_name }}';
              const bumpType = '${{ steps.changeset_status.outputs.bump_type }}';
              const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

              if (newVersion && bumpType) {
                const emoji = bumpType === 'major' ? '🚨' : bumpType === 'minor' ? '✨' : '🐛';
                const releaseInfo = `- ${emoji} **${packageName}**: \`${currentVersion}\` → \`${newVersion}\` (${bumpType})`;

                message = `## ✅ Changeset Found

            This PR includes a changeset. The following version bump is scheduled:

            ${releaseInfo}`;
              } else {
                message = `## ✅ Changeset Found

            This PR includes a changeset for proper versioning.

            <sub>⚠️ Unable to parse version details. [View workflow run](${runUrl}) for more information.</sub>`;
              }
            } else {
              message = `## ⚠️ No Changeset Found

            This PR doesn't include a changeset. If your changes affect functionality, please add one:

            \`\`\`bash
            npm run changeset
            \`\`\`

            <details>
            <summary>When do I need a changeset?</summary>

            **Add a changeset for:**
            - ✅ New features
            - ✅ Bug fixes
            - ✅ Breaking changes
            - ✅ Performance improvements
            - ✅ User-facing changes

            **Skip changeset for:**
            - ❌ Documentation updates only
            - ❌ Test changes only
            - ❌ Build/CI configuration
            - ❌ Code refactoring with no behavioral changes

            **For non-functional changes, create an empty changeset:**
            \`\`\`bash
            npx changeset --empty
            \`\`\`

            </details>

            <sub>This check passes with a warning. Add a changeset if needed before merging.</sub>`;
            }

            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              (comment.body.includes('No Changeset Found') || comment.body.includes('Changeset Found'))
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: message
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }

      - name: Add warning annotation
        if: steps.changeset_check.outputs.found == 'false'
        run: |
          echo "::warning::No changeset found. Consider adding one if this PR includes functional changes."

      - name: Summary
        run: |
          if [ "${{ steps.changeset_check.outputs.found }}" == "true" ]; then
            echo "### ✅ Changeset Found" >> $GITHUB_STEP_SUMMARY
            echo "This PR includes a changeset for proper versioning." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ No Changeset" >> $GITHUB_STEP_SUMMARY
            echo "This PR doesn't include a changeset. If this is intentional (docs/tests only), no action needed." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To add a changeset: \`npm run changeset\`" >> $GITHUB_STEP_SUMMARY
          fi
